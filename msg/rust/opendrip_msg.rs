// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/opendrip-msg.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DeviceInfo)
pub struct DeviceInfo {
    // message fields
    ///  Device name
    // @@protoc_insertion_point(field:DeviceInfo.name)
    pub name: ::std::string::String,
    ///  Device properties
    // @@protoc_insertion_point(field:DeviceInfo.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Minimum message interval in milliseconds for device state
    // @@protoc_insertion_point(field:DeviceInfo.min_msg_interval_ms)
    pub min_msg_interval_ms: u32,
    // message oneof groups
    pub device_type: ::std::option::Option<device_info::Device_type>,
    pub device_units: ::std::option::Option<device_info::Device_units>,
    // special fields
    // @@protoc_insertion_point(special_field:DeviceInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeviceInfo {
    fn default() -> &'a DeviceInfo {
        <DeviceInfo as ::protobuf::Message>::default_instance()
    }
}

impl DeviceInfo {
    pub fn new() -> DeviceInfo {
        ::std::default::Default::default()
    }

    // .DeviceType standard_type = 3;

    pub fn standard_type(&self) -> DeviceType {
        match self.device_type {
            ::std::option::Option::Some(device_info::Device_type::StandardType(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => DeviceType::VALVE,
        }
    }

    pub fn clear_standard_type(&mut self) {
        self.device_type = ::std::option::Option::None;
    }

    pub fn has_standard_type(&self) -> bool {
        match self.device_type {
            ::std::option::Option::Some(device_info::Device_type::StandardType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_standard_type(&mut self, v: DeviceType) {
        self.device_type = ::std::option::Option::Some(device_info::Device_type::StandardType(::protobuf::EnumOrUnknown::new(v)))
    }

    // string custom_type = 4;

    pub fn custom_type(&self) -> &str {
        match self.device_type {
            ::std::option::Option::Some(device_info::Device_type::CustomType(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_custom_type(&mut self) {
        self.device_type = ::std::option::Option::None;
    }

    pub fn has_custom_type(&self) -> bool {
        match self.device_type {
            ::std::option::Option::Some(device_info::Device_type::CustomType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_type(&mut self, v: ::std::string::String) {
        self.device_type = ::std::option::Option::Some(device_info::Device_type::CustomType(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_type(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(device_info::Device_type::CustomType(_)) = self.device_type {
        } else {
            self.device_type = ::std::option::Option::Some(device_info::Device_type::CustomType(::std::string::String::new()));
        }
        match self.device_type {
            ::std::option::Option::Some(device_info::Device_type::CustomType(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_type(&mut self) -> ::std::string::String {
        if self.has_custom_type() {
            match self.device_type.take() {
                ::std::option::Option::Some(device_info::Device_type::CustomType(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .DeviceUnits standard_unit = 5;

    pub fn standard_unit(&self) -> DeviceUnits {
        match self.device_units {
            ::std::option::Option::Some(device_info::Device_units::StandardUnit(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => DeviceUnits::OPEN_CLOSE,
        }
    }

    pub fn clear_standard_unit(&mut self) {
        self.device_units = ::std::option::Option::None;
    }

    pub fn has_standard_unit(&self) -> bool {
        match self.device_units {
            ::std::option::Option::Some(device_info::Device_units::StandardUnit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_standard_unit(&mut self, v: DeviceUnits) {
        self.device_units = ::std::option::Option::Some(device_info::Device_units::StandardUnit(::protobuf::EnumOrUnknown::new(v)))
    }

    // string custom_unit = 6;

    pub fn custom_unit(&self) -> &str {
        match self.device_units {
            ::std::option::Option::Some(device_info::Device_units::CustomUnit(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_custom_unit(&mut self) {
        self.device_units = ::std::option::Option::None;
    }

    pub fn has_custom_unit(&self) -> bool {
        match self.device_units {
            ::std::option::Option::Some(device_info::Device_units::CustomUnit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_unit(&mut self, v: ::std::string::String) {
        self.device_units = ::std::option::Option::Some(device_info::Device_units::CustomUnit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_unit(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(device_info::Device_units::CustomUnit(_)) = self.device_units {
        } else {
            self.device_units = ::std::option::Option::Some(device_info::Device_units::CustomUnit(::std::string::String::new()));
        }
        match self.device_units {
            ::std::option::Option::Some(device_info::Device_units::CustomUnit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_unit(&mut self) -> ::std::string::String {
        if self.has_custom_unit() {
            match self.device_units.take() {
                ::std::option::Option::Some(device_info::Device_units::CustomUnit(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &DeviceInfo| { &m.name },
            |m: &mut DeviceInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &DeviceInfo| { &m.properties },
            |m: &mut DeviceInfo| { &mut m.properties },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "standard_type",
            |message: &DeviceInfo| match &message.device_type {
                ::std::option::Option::Some(device_info::Device_type::StandardType(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut DeviceInfo, e: ::protobuf::EnumOrUnknown<DeviceType>| {
                message.device_type = ::std::option::Option::Some(device_info::Device_type::StandardType(e));
            },
            DeviceType::VALVE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "custom_type",
            DeviceInfo::has_custom_type,
            DeviceInfo::custom_type,
            DeviceInfo::set_custom_type,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "standard_unit",
            |message: &DeviceInfo| match &message.device_units {
                ::std::option::Option::Some(device_info::Device_units::StandardUnit(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut DeviceInfo, e: ::protobuf::EnumOrUnknown<DeviceUnits>| {
                message.device_units = ::std::option::Option::Some(device_info::Device_units::StandardUnit(e));
            },
            DeviceUnits::OPEN_CLOSE,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "custom_unit",
            DeviceInfo::has_custom_unit,
            DeviceInfo::custom_unit,
            DeviceInfo::set_custom_unit,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_msg_interval_ms",
            |m: &DeviceInfo| { &m.min_msg_interval_ms },
            |m: &mut DeviceInfo| { &mut m.min_msg_interval_ms },
        ));
        oneofs.push(device_info::Device_type::generated_oneof_descriptor_data());
        oneofs.push(device_info::Device_units::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeviceInfo>(
            "DeviceInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeviceInfo {
    const NAME: &'static str = "DeviceInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                24 => {
                    self.device_type = ::std::option::Option::Some(device_info::Device_type::StandardType(is.read_enum_or_unknown()?));
                },
                34 => {
                    self.device_type = ::std::option::Option::Some(device_info::Device_type::CustomType(is.read_string()?));
                },
                40 => {
                    self.device_units = ::std::option::Option::Some(device_info::Device_units::StandardUnit(is.read_enum_or_unknown()?));
                },
                50 => {
                    self.device_units = ::std::option::Option::Some(device_info::Device_units::CustomUnit(is.read_string()?));
                },
                56 => {
                    self.min_msg_interval_ms = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.min_msg_interval_ms != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.min_msg_interval_ms);
        }
        if let ::std::option::Option::Some(ref v) = self.device_type {
            match v {
                &device_info::Device_type::StandardType(v) => {
                    my_size += ::protobuf::rt::int32_size(3, v.value());
                },
                &device_info::Device_type::CustomType(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.device_units {
            match v {
                &device_info::Device_units::StandardUnit(v) => {
                    my_size += ::protobuf::rt::int32_size(5, v.value());
                },
                &device_info::Device_units::CustomUnit(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if self.min_msg_interval_ms != 0 {
            os.write_uint32(7, self.min_msg_interval_ms)?;
        }
        if let ::std::option::Option::Some(ref v) = self.device_type {
            match v {
                &device_info::Device_type::StandardType(v) => {
                    os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
                },
                &device_info::Device_type::CustomType(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.device_units {
            match v {
                &device_info::Device_units::StandardUnit(v) => {
                    os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
                },
                &device_info::Device_units::CustomUnit(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeviceInfo {
        DeviceInfo::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.properties.clear();
        self.device_type = ::std::option::Option::None;
        self.device_type = ::std::option::Option::None;
        self.device_units = ::std::option::Option::None;
        self.device_units = ::std::option::Option::None;
        self.min_msg_interval_ms = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeviceInfo {
        static instance: ::protobuf::rt::Lazy<DeviceInfo> = ::protobuf::rt::Lazy::new();
        instance.get(DeviceInfo::new)
    }
}

impl ::protobuf::MessageFull for DeviceInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeviceInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeviceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DeviceInfo`
pub mod device_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DeviceInfo.device_type)
    pub enum Device_type {
        // @@protoc_insertion_point(oneof_field:DeviceInfo.standard_type)
        StandardType(::protobuf::EnumOrUnknown<super::DeviceType>),
        // @@protoc_insertion_point(oneof_field:DeviceInfo.custom_type)
        CustomType(::std::string::String),
    }

    impl ::protobuf::Oneof for Device_type {
    }

    impl ::protobuf::OneofFull for Device_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeviceInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("device_type").unwrap()).clone()
        }
    }

    impl Device_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Device_type>("device_type")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DeviceInfo.device_units)
    pub enum Device_units {
        // @@protoc_insertion_point(oneof_field:DeviceInfo.standard_unit)
        StandardUnit(::protobuf::EnumOrUnknown<super::DeviceUnits>),
        // @@protoc_insertion_point(oneof_field:DeviceInfo.custom_unit)
        CustomUnit(::std::string::String),
    }

    impl ::protobuf::Oneof for Device_units {
    }

    impl ::protobuf::OneofFull for Device_units {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DeviceInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("device_units").unwrap()).clone()
        }
    }

    impl Device_units {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Device_units>("device_units")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DeviceConfig)
pub struct DeviceConfig {
    // message fields
    ///  Device mode
    // @@protoc_insertion_point(field:DeviceConfig.device_mode)
    pub device_mode: ::protobuf::EnumOrUnknown<DeviceMode>,
    ///  Message interval in milliseconds for device state
    // @@protoc_insertion_point(field:DeviceConfig.msg_interval_ms)
    pub msg_interval_ms: u32,
    // special fields
    // @@protoc_insertion_point(special_field:DeviceConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeviceConfig {
    fn default() -> &'a DeviceConfig {
        <DeviceConfig as ::protobuf::Message>::default_instance()
    }
}

impl DeviceConfig {
    pub fn new() -> DeviceConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device_mode",
            |m: &DeviceConfig| { &m.device_mode },
            |m: &mut DeviceConfig| { &mut m.device_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_interval_ms",
            |m: &DeviceConfig| { &m.msg_interval_ms },
            |m: &mut DeviceConfig| { &mut m.msg_interval_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeviceConfig>(
            "DeviceConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeviceConfig {
    const NAME: &'static str = "DeviceConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device_mode = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.msg_interval_ms = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.device_mode != ::protobuf::EnumOrUnknown::new(DeviceMode::AUTO) {
            my_size += ::protobuf::rt::int32_size(1, self.device_mode.value());
        }
        if self.msg_interval_ms != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.msg_interval_ms);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.device_mode != ::protobuf::EnumOrUnknown::new(DeviceMode::AUTO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.device_mode))?;
        }
        if self.msg_interval_ms != 0 {
            os.write_uint32(2, self.msg_interval_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeviceConfig {
        DeviceConfig::new()
    }

    fn clear(&mut self) {
        self.device_mode = ::protobuf::EnumOrUnknown::new(DeviceMode::AUTO);
        self.msg_interval_ms = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeviceConfig {
        static instance: DeviceConfig = DeviceConfig {
            device_mode: ::protobuf::EnumOrUnknown::from_i32(0),
            msg_interval_ms: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeviceConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeviceConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeviceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DeviceState)
pub struct DeviceState {
    // message fields
    ///  Value (interpretation of string values depends on DeviceInfo.device_type)
    ///    VALVE => "open" or "closed"
    ///    FLOW_METER => float
    // @@protoc_insertion_point(field:DeviceState.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DeviceState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeviceState {
    fn default() -> &'a DeviceState {
        <DeviceState as ::protobuf::Message>::default_instance()
    }
}

impl DeviceState {
    pub fn new() -> DeviceState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &DeviceState| { &m.value },
            |m: &mut DeviceState| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeviceState>(
            "DeviceState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeviceState {
    const NAME: &'static str = "DeviceState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeviceState {
        DeviceState::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeviceState {
        static instance: DeviceState = DeviceState {
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeviceState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeviceState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeviceState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ControllerInfo)
pub struct ControllerInfo {
    // message fields
    ///  Controller name
    // @@protoc_insertion_point(field:ControllerInfo.name)
    pub name: ::std::string::String,
    ///  Controller properties
    // @@protoc_insertion_point(field:ControllerInfo.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  List of device IDs for controller
    // @@protoc_insertion_point(field:ControllerInfo.devices)
    pub devices: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ControllerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControllerInfo {
    fn default() -> &'a ControllerInfo {
        <ControllerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ControllerInfo {
    pub fn new() -> ControllerInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ControllerInfo| { &m.name },
            |m: &mut ControllerInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &ControllerInfo| { &m.properties },
            |m: &mut ControllerInfo| { &mut m.properties },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "devices",
            |m: &ControllerInfo| { &m.devices },
            |m: &mut ControllerInfo| { &mut m.devices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControllerInfo>(
            "ControllerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControllerInfo {
    const NAME: &'static str = "ControllerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                26 => {
                    self.devices.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.devices {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.devices {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControllerInfo {
        ControllerInfo::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.properties.clear();
        self.devices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControllerInfo {
        static instance: ::protobuf::rt::Lazy<ControllerInfo> = ::protobuf::rt::Lazy::new();
        instance.get(ControllerInfo::new)
    }
}

impl ::protobuf::MessageFull for ControllerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControllerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControllerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControllerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ControllerConfig)
pub struct ControllerConfig {
    // special fields
    // @@protoc_insertion_point(special_field:ControllerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControllerConfig {
    fn default() -> &'a ControllerConfig {
        <ControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl ControllerConfig {
    pub fn new() -> ControllerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControllerConfig>(
            "ControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControllerConfig {
    const NAME: &'static str = "ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControllerConfig {
        ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControllerConfig {
        static instance: ControllerConfig = ControllerConfig {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControllerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControllerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ControllerState)
pub struct ControllerState {
    // message fields
    ///  Controller uptime in seconds
    // @@protoc_insertion_point(field:ControllerState.uptime_s)
    pub uptime_s: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ControllerState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControllerState {
    fn default() -> &'a ControllerState {
        <ControllerState as ::protobuf::Message>::default_instance()
    }
}

impl ControllerState {
    pub fn new() -> ControllerState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uptime_s",
            |m: &ControllerState| { &m.uptime_s },
            |m: &mut ControllerState| { &mut m.uptime_s },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControllerState>(
            "ControllerState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControllerState {
    const NAME: &'static str = "ControllerState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uptime_s = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uptime_s != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uptime_s);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uptime_s != 0 {
            os.write_uint32(1, self.uptime_s)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControllerState {
        ControllerState::new()
    }

    fn clear(&mut self) {
        self.uptime_s = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControllerState {
        static instance: ControllerState = ControllerState {
            uptime_s: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControllerState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControllerState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControllerState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControllerState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AgentInfo)
pub struct AgentInfo {
    // message fields
    ///  Controller name
    // @@protoc_insertion_point(field:AgentInfo.name)
    pub name: ::std::string::String,
    ///  Controller properties
    // @@protoc_insertion_point(field:AgentInfo.properties)
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  List of controller IDs for agent
    // @@protoc_insertion_point(field:AgentInfo.controllers)
    pub controllers: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:AgentInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentInfo {
    fn default() -> &'a AgentInfo {
        <AgentInfo as ::protobuf::Message>::default_instance()
    }
}

impl AgentInfo {
    pub fn new() -> AgentInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AgentInfo| { &m.name },
            |m: &mut AgentInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "properties",
            |m: &AgentInfo| { &m.properties },
            |m: &mut AgentInfo| { &mut m.properties },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "controllers",
            |m: &AgentInfo| { &m.controllers },
            |m: &mut AgentInfo| { &mut m.controllers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentInfo>(
            "AgentInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentInfo {
    const NAME: &'static str = "AgentInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.properties.insert(key, value);
                },
                26 => {
                    self.controllers.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.controllers {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.properties {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.controllers {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentInfo {
        AgentInfo::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.properties.clear();
        self.controllers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentInfo {
        static instance: ::protobuf::rt::Lazy<AgentInfo> = ::protobuf::rt::Lazy::new();
        instance.get(AgentInfo::new)
    }
}

impl ::protobuf::MessageFull for AgentInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AgentConfig)
pub struct AgentConfig {
    // special fields
    // @@protoc_insertion_point(special_field:AgentConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentConfig {
    fn default() -> &'a AgentConfig {
        <AgentConfig as ::protobuf::Message>::default_instance()
    }
}

impl AgentConfig {
    pub fn new() -> AgentConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentConfig>(
            "AgentConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentConfig {
    const NAME: &'static str = "AgentConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentConfig {
        AgentConfig::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentConfig {
        static instance: AgentConfig = AgentConfig {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AgentConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AgentState)
pub struct AgentState {
    // message fields
    ///  Agent uptime in seconds
    // @@protoc_insertion_point(field:AgentState.uptime_s)
    pub uptime_s: u32,
    // special fields
    // @@protoc_insertion_point(special_field:AgentState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentState {
    fn default() -> &'a AgentState {
        <AgentState as ::protobuf::Message>::default_instance()
    }
}

impl AgentState {
    pub fn new() -> AgentState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uptime_s",
            |m: &AgentState| { &m.uptime_s },
            |m: &mut AgentState| { &mut m.uptime_s },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentState>(
            "AgentState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentState {
    const NAME: &'static str = "AgentState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.uptime_s = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.uptime_s != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.uptime_s);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.uptime_s != 0 {
            os.write_uint32(1, self.uptime_s)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentState {
        AgentState::new()
    }

    fn clear(&mut self) {
        self.uptime_s = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentState {
        static instance: AgentState = AgentState {
            uptime_s: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AgentState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DeviceType)
pub enum DeviceType {
    // @@protoc_insertion_point(enum_value:DeviceType.VALVE)
    VALVE = 0,
    // @@protoc_insertion_point(enum_value:DeviceType.FLOW_METER)
    FLOW_METER = 1,
}

impl ::protobuf::Enum for DeviceType {
    const NAME: &'static str = "DeviceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeviceType> {
        match value {
            0 => ::std::option::Option::Some(DeviceType::VALVE),
            1 => ::std::option::Option::Some(DeviceType::FLOW_METER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DeviceType] = &[
        DeviceType::VALVE,
        DeviceType::FLOW_METER,
    ];
}

impl ::protobuf::EnumFull for DeviceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DeviceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DeviceType {
    fn default() -> Self {
        DeviceType::VALVE
    }
}

impl DeviceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DeviceType>("DeviceType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DeviceUnits)
pub enum DeviceUnits {
    // @@protoc_insertion_point(enum_value:DeviceUnits.OPEN_CLOSE)
    OPEN_CLOSE = 0,
    // @@protoc_insertion_point(enum_value:DeviceUnits.GALLONS_PER_MINUTE)
    GALLONS_PER_MINUTE = 1,
}

impl ::protobuf::Enum for DeviceUnits {
    const NAME: &'static str = "DeviceUnits";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeviceUnits> {
        match value {
            0 => ::std::option::Option::Some(DeviceUnits::OPEN_CLOSE),
            1 => ::std::option::Option::Some(DeviceUnits::GALLONS_PER_MINUTE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DeviceUnits] = &[
        DeviceUnits::OPEN_CLOSE,
        DeviceUnits::GALLONS_PER_MINUTE,
    ];
}

impl ::protobuf::EnumFull for DeviceUnits {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DeviceUnits").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DeviceUnits {
    fn default() -> Self {
        DeviceUnits::OPEN_CLOSE
    }
}

impl DeviceUnits {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DeviceUnits>("DeviceUnits")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DeviceMode)
pub enum DeviceMode {
    // @@protoc_insertion_point(enum_value:DeviceMode.AUTO)
    AUTO = 0,
    // @@protoc_insertion_point(enum_value:DeviceMode.MANUAL)
    MANUAL = 1,
    // @@protoc_insertion_point(enum_value:DeviceMode.REMOTE)
    REMOTE = 2,
}

impl ::protobuf::Enum for DeviceMode {
    const NAME: &'static str = "DeviceMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeviceMode> {
        match value {
            0 => ::std::option::Option::Some(DeviceMode::AUTO),
            1 => ::std::option::Option::Some(DeviceMode::MANUAL),
            2 => ::std::option::Option::Some(DeviceMode::REMOTE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DeviceMode] = &[
        DeviceMode::AUTO,
        DeviceMode::MANUAL,
        DeviceMode::REMOTE,
    ];
}

impl ::protobuf::EnumFull for DeviceMode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DeviceMode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DeviceMode {
    fn default() -> Self {
        DeviceMode::AUTO
    }
}

impl DeviceMode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DeviceMode>("DeviceMode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18proto/opendrip-msg.proto\"\x99\x03\n\nDeviceInfo\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12;\n\nproperties\x18\x02\x20\x03(\x0b2\
    \x1b.DeviceInfo.PropertiesEntryR\nproperties\x122\n\rstandard_type\x18\
    \x03\x20\x01(\x0e2\x0b.DeviceTypeH\0R\x0cstandardType\x12!\n\x0bcustom_t\
    ype\x18\x04\x20\x01(\tH\0R\ncustomType\x123\n\rstandard_unit\x18\x05\x20\
    \x01(\x0e2\x0c.DeviceUnitsH\x01R\x0cstandardUnit\x12!\n\x0bcustom_unit\
    \x18\x06\x20\x01(\tH\x01R\ncustomUnit\x12-\n\x13min_msg_interval_ms\x18\
    \x07\x20\x01(\rR\x10minMsgIntervalMs\x1a=\n\x0fPropertiesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01B\r\n\x0bdevice_typeB\x0e\n\x0cdevice_units\"d\n\x0c\
    DeviceConfig\x12,\n\x0bdevice_mode\x18\x01\x20\x01(\x0e2\x0b.DeviceModeR\
    \ndeviceMode\x12&\n\x0fmsg_interval_ms\x18\x02\x20\x01(\rR\rmsgIntervalM\
    s\"#\n\x0bDeviceState\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\"\
    \xbe\x01\n\x0eControllerInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04na\
    me\x12?\n\nproperties\x18\x02\x20\x03(\x0b2\x1f.ControllerInfo.Propertie\
    sEntryR\nproperties\x12\x18\n\x07devices\x18\x03\x20\x03(\tR\x07devices\
    \x1a=\n\x0fPropertiesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x12\n\x10Co\
    ntrollerConfig\",\n\x0fControllerState\x12\x19\n\x08uptime_s\x18\x01\x20\
    \x01(\rR\x07uptimeS\"\xbc\x01\n\tAgentInfo\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12:\n\nproperties\x18\x02\x20\x03(\x0b2\x1a.AgentInfo.\
    PropertiesEntryR\nproperties\x12\x20\n\x0bcontrollers\x18\x03\x20\x03(\t\
    R\x0bcontrollers\x1a=\n\x0fPropertiesEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\r\n\x0bAgentConfig\"'\n\nAgentState\x12\x19\n\x08uptime_s\x18\x01\
    \x20\x01(\rR\x07uptimeS*'\n\nDeviceType\x12\t\n\x05VALVE\x10\0\x12\x0e\n\
    \nFLOW_METER\x10\x01*5\n\x0bDeviceUnits\x12\x0e\n\nOPEN_CLOSE\x10\0\x12\
    \x16\n\x12GALLONS_PER_MINUTE\x10\x01*.\n\nDeviceMode\x12\x08\n\x04AUTO\
    \x10\0\x12\n\n\x06MANUAL\x10\x01\x12\n\n\x06REMOTE\x10\x02J\xa2\x13\n\
    \x06\x12\x04\0\0]\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x16\n\x02\x05\0\
    \x12\x04\x06\0\t\x012\n\n\x20DEVICE\n\n\n\n\n\x03\x05\0\x01\x12\x03\x06\
    \x05\x0f\n\x0b\n\x04\x05\0\x02\0\x12\x03\x07\x04\x0e\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x07\x04\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x0c\
    \r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x08\x04\x13\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03\x08\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\
    \x11\x12\n\n\n\x02\x05\x01\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x05\x01\x01\
    \x12\x03\x0b\x05\x10\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x0c\x04\x13\n\x0c\
    \n\x05\x05\x01\x02\0\x01\x12\x03\x0c\x04\x0e\n\x0c\n\x05\x05\x01\x02\0\
    \x02\x12\x03\x0c\x11\x12\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\r\x04\x1b\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\r\x04\x16\n\x0c\n\x05\x05\x01\x02\
    \x01\x02\x12\x03\r\x19\x1a\n\n\n\x02\x05\x02\x12\x04\x10\0\x14\x01\n\n\n\
    \x03\x05\x02\x01\x12\x03\x10\x05\x0f\n<\n\x04\x05\x02\x02\0\x12\x03\x11\
    \x04\r\"/\x20AUTO\x20\x20\x20-\x20Device\x20operates\x20per\x20controlle\
    r\x20logic\n\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x11\x04\x08\n\x0c\n\
    \x05\x05\x02\x02\0\x02\x12\x03\x11\x0b\x0c\nY\n\x04\x05\x02\x02\x01\x12\
    \x03\x12\x04\x0f\"L\x20MANUAL\x20-\x20Device\x20operates\x20per\x20a\x20\
    local\x20override\x20(buttons\x20on\x20controller,\x20etc)\n\n\x0c\n\x05\
    \x05\x02\x02\x01\x01\x12\x03\x12\x04\n\n\x0c\n\x05\x05\x02\x02\x01\x02\
    \x12\x03\x12\r\x0e\na\n\x04\x05\x02\x02\x02\x12\x03\x13\x04\x0f\"T\x20RE\
    MOTE\x20-\x20Device\x20operates\x20per\x20commands\x20from\x20agent\x20(\
    mqtt\x20message\x20from\x20a\x20client,\x20etc)\n\n\x0c\n\x05\x05\x02\
    \x02\x02\x01\x12\x03\x13\x04\n\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\
    \x13\r\x0e\n\n\n\x02\x04\0\x12\x04\x16\0'\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x16\x08\x12\n\x1a\n\x04\x04\0\x02\0\x12\x03\x18\x04\x14\x1a\r\x20De\
    vice\x20name\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x18\x04\n\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x18\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x18\x12\x13\n\x20\n\x04\x04\0\x02\x01\x12\x03\x1a\x04'\x1a\x13\x20Devic\
    e\x20properties\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x1a\x04\x17\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x18\"\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x1a%&\n\x1b\n\x04\x04\0\x08\0\x12\x04\x1c\x04\x1f\x05\x1a\r\
    \x20Device\x20type\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1c\n\x15\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\x1d\x08%\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x1d\x08\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1d\x13\x20\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x1d#$\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x1e\x08\x1f\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1e\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x1e\x0f\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x1e\x1d\x1e\n\x1c\n\x04\x04\0\x08\x01\x12\x04!\x04$\x05\x1a\x0e\
    \x20Device\x20units\n\n\x0c\n\x05\x04\0\x08\x01\x01\x12\x03!\n\x16\n\x0b\
    \n\x04\x04\0\x02\x04\x12\x03\"\x08&\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03\"\x08\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\"\x14!\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\"$%\n\x0b\n\x04\x04\0\x02\x05\x12\x03#\x08\
    \x1f\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03#\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03#\x0f\x1a\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03#\x1d\
    \x1e\nH\n\x04\x04\0\x02\x06\x12\x03&\x04#\x1a;\x20Minimum\x20message\x20\
    interval\x20in\x20milliseconds\x20for\x20device\x20state\n\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03&\
    \x0b\x1e\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03&!\"\n\n\n\x02\x04\x01\x12\
    \x04)\0.\x01\n\n\n\x03\x04\x01\x01\x12\x03)\x08\x14\n\x1a\n\x04\x04\x01\
    \x02\0\x12\x03+\x04\x1f\x1a\r\x20Device\x20mode\n\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03+\x04\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\x0f\
    \x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03+\x1d\x1e\n@\n\x04\x04\x01\x02\
    \x01\x12\x03-\x04\x1f\x1a3\x20Message\x20interval\x20in\x20milliseconds\
    \x20for\x20device\x20state\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03-\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03-\x0b\x1a\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03-\x1d\x1e\n\n\n\x02\x04\x02\x12\x040\05\x01\n\n\
    \n\x03\x04\x02\x01\x12\x030\x08\x13\n\x8f\x01\n\x04\x04\x02\x02\0\x12\
    \x034\x04\x15\x1a\x81\x01\x20Value\x20(interpretation\x20of\x20string\
    \x20values\x20depends\x20on\x20DeviceInfo.device_type)\n\x20\x20\x20VALV\
    E\x20=>\x20\"open\"\x20or\x20\"closed\"\n\x20\x20\x20FLOW_METER\x20=>\
    \x20float\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x034\x04\n\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x034\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x034\
    \x13\x14\n\x1a\n\x02\x04\x03\x12\x04;\0B\x012\x0e\n\x20CONTROLLER\n\n\n\
    \n\n\x03\x04\x03\x01\x12\x03;\x08\x16\n\x1e\n\x04\x04\x03\x02\0\x12\x03=\
    \x04\x14\x1a\x11\x20Controller\x20name\n\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03=\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03=\x0b\x0f\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03=\x12\x13\n$\n\x04\x04\x03\x02\x01\x12\x03\
    ?\x04'\x1a\x17\x20Controller\x20properties\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03?\x04\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03?\x18\"\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03?%&\n0\n\x04\x04\x03\x02\x02\x12\
    \x03A\x04\x20\x1a#\x20List\x20of\x20device\x20IDs\x20for\x20controller\n\
    \n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03A\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\x02\x05\x12\x03A\r\x13\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03A\x14\
    \x1b\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03A\x1e\x1f\n\t\n\x02\x04\x04\
    \x12\x03D\0\x1c\n\n\n\x03\x04\x04\x01\x12\x03D\x08\x18\n\n\n\x02\x04\x05\
    \x12\x04F\0I\x01\n\n\n\x03\x04\x05\x01\x12\x03F\x08\x17\n+\n\x04\x04\x05\
    \x02\0\x12\x03H\x04\x18\x1a\x1e\x20Controller\x20uptime\x20in\x20seconds\
    \n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03H\x04\n\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03H\x0b\x13\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03H\x16\x17\n\
    \x15\n\x02\x04\x06\x12\x04O\0V\x012\t\n\x20AGENT\n\n\n\n\n\x03\x04\x06\
    \x01\x12\x03O\x08\x11\n\x1e\n\x04\x04\x06\x02\0\x12\x03Q\x04\x14\x1a\x11\
    \x20Controller\x20name\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03Q\x04\n\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x03Q\x0b\x0f\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03Q\x12\x13\n$\n\x04\x04\x06\x02\x01\x12\x03S\x04'\x1a\x17\x20\
    Controller\x20properties\n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03S\x04\
    \x17\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03S\x18\"\n\x0c\n\x05\x04\x06\
    \x02\x01\x03\x12\x03S%&\n/\n\x04\x04\x06\x02\x02\x12\x03U\x04$\x1a\"\x20\
    List\x20of\x20controller\x20IDs\x20for\x20agent\n\n\x0c\n\x05\x04\x06\
    \x02\x02\x04\x12\x03U\x04\x0c\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03U\r\
    \x13\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03U\x14\x1f\n\x0c\n\x05\x04\
    \x06\x02\x02\x03\x12\x03U\"#\n\t\n\x02\x04\x07\x12\x03X\0\x17\n\n\n\x03\
    \x04\x07\x01\x12\x03X\x08\x13\n\n\n\x02\x04\x08\x12\x04Z\0]\x01\n\n\n\
    \x03\x04\x08\x01\x12\x03Z\x08\x12\n&\n\x04\x04\x08\x02\0\x12\x03\\\x04\
    \x18\x1a\x19\x20Agent\x20uptime\x20in\x20seconds\n\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x03\\\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03\\\x0b\
    \x13\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03\\\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(DeviceInfo::generated_message_descriptor_data());
            messages.push(DeviceConfig::generated_message_descriptor_data());
            messages.push(DeviceState::generated_message_descriptor_data());
            messages.push(ControllerInfo::generated_message_descriptor_data());
            messages.push(ControllerConfig::generated_message_descriptor_data());
            messages.push(ControllerState::generated_message_descriptor_data());
            messages.push(AgentInfo::generated_message_descriptor_data());
            messages.push(AgentConfig::generated_message_descriptor_data());
            messages.push(AgentState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(DeviceType::generated_enum_descriptor_data());
            enums.push(DeviceUnits::generated_enum_descriptor_data());
            enums.push(DeviceMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
