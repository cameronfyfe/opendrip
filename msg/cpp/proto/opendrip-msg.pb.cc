// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/opendrip-msg.proto

#include "proto/opendrip-msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR DeviceInfo_PropertiesEntry_DoNotUse::DeviceInfo_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DeviceInfo_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfo_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfo_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DeviceInfo_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfo_PropertiesEntry_DoNotUseDefaultTypeInternal _DeviceInfo_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_msg_interval_ms_)*/0u
  , /*decltype(_impl_.device_type_)*/{}
  , /*decltype(_impl_.device_units_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR DeviceConfig::DeviceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_mode_)*/0
  , /*decltype(_impl_.msg_interval_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConfigDefaultTypeInternal() {}
  union {
    DeviceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
PROTOBUF_CONSTEXPR DeviceState::DeviceState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStateDefaultTypeInternal() {}
  union {
    DeviceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
PROTOBUF_CONSTEXPR ControllerInfo_PropertiesEntry_DoNotUse::ControllerInfo_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ControllerInfo_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerInfo_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerInfo_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerInfo_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerInfo_PropertiesEntry_DoNotUseDefaultTypeInternal _ControllerInfo_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ControllerInfo::ControllerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControllerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerInfoDefaultTypeInternal() {}
  union {
    ControllerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerInfoDefaultTypeInternal _ControllerInfo_default_instance_;
PROTOBUF_CONSTEXPR ControllerConfig::ControllerConfig(
    ::_pbi::ConstantInitialized) {}
struct ControllerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerConfigDefaultTypeInternal() {}
  union {
    ControllerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerConfigDefaultTypeInternal _ControllerConfig_default_instance_;
PROTOBUF_CONSTEXPR ControllerState::ControllerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uptime_s_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControllerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerStateDefaultTypeInternal() {}
  union {
    ControllerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerStateDefaultTypeInternal _ControllerState_default_instance_;
PROTOBUF_CONSTEXPR AgentInfo_PropertiesEntry_DoNotUse::AgentInfo_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AgentInfo_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfo_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfo_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgentInfo_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfo_PropertiesEntry_DoNotUseDefaultTypeInternal _AgentInfo_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AgentInfo::AgentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.controllers_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfoDefaultTypeInternal() {}
  union {
    AgentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfoDefaultTypeInternal _AgentInfo_default_instance_;
PROTOBUF_CONSTEXPR AgentConfig::AgentConfig(
    ::_pbi::ConstantInitialized) {}
struct AgentConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentConfigDefaultTypeInternal() {}
  union {
    AgentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentConfigDefaultTypeInternal _AgentConfig_default_instance_;
PROTOBUF_CONSTEXPR AgentState::AgentState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uptime_s_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentStateDefaultTypeInternal() {}
  union {
    AgentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentStateDefaultTypeInternal _AgentState_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2fopendrip_2dmsg_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fopendrip_2dmsg_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fopendrip_2dmsg_2eproto = nullptr;

const uint32_t TableStruct_proto_2fopendrip_2dmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DeviceInfo_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.properties_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.min_msg_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _impl_.device_units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceConfig, _impl_.device_mode_),
  PROTOBUF_FIELD_OFFSET(::DeviceConfig, _impl_.msg_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceState, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::ControllerInfo_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ControllerInfo_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControllerInfo_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ControllerInfo_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControllerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ControllerInfo, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::ControllerInfo, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControllerState, _impl_.uptime_s_),
  PROTOBUF_FIELD_OFFSET(::AgentInfo_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AgentInfo_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AgentInfo_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AgentInfo_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AgentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AgentInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::AgentInfo, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::AgentInfo, _impl_.controllers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AgentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AgentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AgentState, _impl_.uptime_s_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::DeviceInfo_PropertiesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::DeviceInfo)},
  { 25, -1, -1, sizeof(::DeviceConfig)},
  { 33, -1, -1, sizeof(::DeviceState)},
  { 40, 48, -1, sizeof(::ControllerInfo_PropertiesEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::ControllerInfo)},
  { 59, -1, -1, sizeof(::ControllerConfig)},
  { 65, -1, -1, sizeof(::ControllerState)},
  { 72, 80, -1, sizeof(::AgentInfo_PropertiesEntry_DoNotUse)},
  { 82, -1, -1, sizeof(::AgentInfo)},
  { 91, -1, -1, sizeof(::AgentConfig)},
  { 97, -1, -1, sizeof(::AgentState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_DeviceInfo_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::_DeviceInfo_default_instance_._instance,
  &::_DeviceConfig_default_instance_._instance,
  &::_DeviceState_default_instance_._instance,
  &::_ControllerInfo_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::_ControllerInfo_default_instance_._instance,
  &::_ControllerConfig_default_instance_._instance,
  &::_ControllerState_default_instance_._instance,
  &::_AgentInfo_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::_AgentInfo_default_instance_._instance,
  &::_AgentConfig_default_instance_._instance,
  &::_AgentState_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fopendrip_2dmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030proto/opendrip-msg.proto\"\265\002\n\nDeviceInf"
  "o\022\014\n\004name\030\001 \001(\t\022/\n\nproperties\030\002 \003(\0132\033.De"
  "viceInfo.PropertiesEntry\022$\n\rstandard_typ"
  "e\030\003 \001(\0162\013.DeviceTypeH\000\022\025\n\013custom_type\030\004 "
  "\001(\tH\000\022%\n\rstandard_unit\030\005 \001(\0162\014.DeviceUni"
  "tsH\001\022\025\n\013custom_unit\030\006 \001(\tH\001\022\033\n\023min_msg_i"
  "nterval_ms\030\007 \001(\r\0321\n\017PropertiesEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\r\n\013device_ty"
  "peB\016\n\014device_units\"I\n\014DeviceConfig\022 \n\013de"
  "vice_mode\030\001 \001(\0162\013.DeviceMode\022\027\n\017msg_inte"
  "rval_ms\030\002 \001(\r\"\034\n\013DeviceState\022\r\n\005value\030\001 "
  "\001(\t\"\227\001\n\016ControllerInfo\022\014\n\004name\030\001 \001(\t\0223\n\n"
  "properties\030\002 \003(\0132\037.ControllerInfo.Proper"
  "tiesEntry\022\017\n\007devices\030\003 \003(\t\0321\n\017Properties"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\022\n"
  "\020ControllerConfig\"#\n\017ControllerState\022\020\n\010"
  "uptime_s\030\001 \001(\r\"\221\001\n\tAgentInfo\022\014\n\004name\030\001 \001"
  "(\t\022.\n\nproperties\030\002 \003(\0132\032.AgentInfo.Prope"
  "rtiesEntry\022\023\n\013controllers\030\003 \003(\t\0321\n\017Prope"
  "rtiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"\r\n\013AgentConfig\"\036\n\nAgentState\022\020\n\010uptim"
  "e_s\030\001 \001(\r*\'\n\nDeviceType\022\t\n\005VALVE\020\000\022\016\n\nFL"
  "OW_METER\020\001*5\n\013DeviceUnits\022\016\n\nOPEN_CLOSE\020"
  "\000\022\026\n\022GALLONS_PER_MINUTE\020\001*.\n\nDeviceMode\022"
  "\010\n\004AUTO\020\000\022\n\n\006MANUAL\020\001\022\n\n\006REMOTE\020\002b\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fopendrip_2dmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fopendrip_2dmsg_2eproto = {
    false, false, 1001, descriptor_table_protodef_proto_2fopendrip_2dmsg_2eproto,
    "proto/opendrip-msg.proto",
    &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_proto_2fopendrip_2dmsg_2eproto::offsets,
    file_level_metadata_proto_2fopendrip_2dmsg_2eproto, file_level_enum_descriptors_proto_2fopendrip_2dmsg_2eproto,
    file_level_service_descriptors_proto_2fopendrip_2dmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter() {
  return &descriptor_table_proto_2fopendrip_2dmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fopendrip_2dmsg_2eproto(&descriptor_table_proto_2fopendrip_2dmsg_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopendrip_2dmsg_2eproto);
  return file_level_enum_descriptors_proto_2fopendrip_2dmsg_2eproto[0];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopendrip_2dmsg_2eproto);
  return file_level_enum_descriptors_proto_2fopendrip_2dmsg_2eproto[1];
}
bool DeviceUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopendrip_2dmsg_2eproto);
  return file_level_enum_descriptors_proto_2fopendrip_2dmsg_2eproto[2];
}
bool DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

DeviceInfo_PropertiesEntry_DoNotUse::DeviceInfo_PropertiesEntry_DoNotUse() {}
DeviceInfo_PropertiesEntry_DoNotUse::DeviceInfo_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeviceInfo_PropertiesEntry_DoNotUse::MergeFrom(const DeviceInfo_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[0]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DeviceInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.min_msg_interval_ms_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.device_units_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.min_msg_interval_ms_ = from._impl_.min_msg_interval_ms_;
  clear_has_device_type();
  switch (from.device_type_case()) {
    case kStandardType: {
      _this->_internal_set_standard_type(from._internal_standard_type());
      break;
    }
    case kCustomType: {
      _this->_internal_set_custom_type(from._internal_custom_type());
      break;
    }
    case DEVICE_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_device_units();
  switch (from.device_units_case()) {
    case kStandardUnit: {
      _this->_internal_set_standard_unit(from._internal_standard_unit());
      break;
    }
    case kCustomUnit: {
      _this->_internal_set_custom_unit(from._internal_custom_unit());
      break;
    }
    case DEVICE_UNITS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

inline void DeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.min_msg_interval_ms_){0u}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.device_units_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_device_type();
  clear_has_device_units();
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.name_.Destroy();
  if (has_device_type()) {
    clear_device_type();
  }
  if (has_device_units()) {
    clear_device_units();
  }
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  _this->_impl_.properties_.Destruct();
}
void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceInfo::clear_device_type() {
// @@protoc_insertion_point(one_of_clear_start:DeviceInfo)
  switch (device_type_case()) {
    case kStandardType: {
      // No need to clear
      break;
    }
    case kCustomType: {
      _impl_.device_type_.custom_type_.Destroy();
      break;
    }
    case DEVICE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEVICE_TYPE_NOT_SET;
}

void DeviceInfo::clear_device_units() {
// @@protoc_insertion_point(one_of_clear_start:DeviceInfo)
  switch (device_units_case()) {
    case kStandardUnit: {
      // No need to clear
      break;
    }
    case kCustomUnit: {
      _impl_.device_units_.custom_unit_.Destroy();
      break;
    }
    case DEVICE_UNITS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = DEVICE_UNITS_NOT_SET;
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.min_msg_interval_ms_ = 0u;
  clear_device_type();
  clear_device_units();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DeviceType standard_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_standard_type(static_cast<::DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string custom_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_custom_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.custom_type"));
        } else
          goto handle_unusual;
        continue;
      // .DeviceUnits standard_unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_standard_unit(static_cast<::DeviceUnits>(val));
        } else
          goto handle_unusual;
        continue;
      // string custom_unit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_custom_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceInfo.custom_unit"));
        } else
          goto handle_unusual;
        continue;
      // uint32 min_msg_interval_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.min_msg_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> properties = 2;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DeviceInfo_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DeviceInfo.PropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DeviceInfo.PropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .DeviceType standard_type = 3;
  if (_internal_has_standard_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_standard_type(), target);
  }

  // string custom_type = 4;
  if (_internal_has_custom_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_type().data(), static_cast<int>(this->_internal_custom_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.custom_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_custom_type(), target);
  }

  // .DeviceUnits standard_unit = 5;
  if (_internal_has_standard_unit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_standard_unit(), target);
  }

  // string custom_unit = 6;
  if (_internal_has_custom_unit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_unit().data(), static_cast<int>(this->_internal_custom_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.custom_unit");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_custom_unit(), target);
  }

  // uint32 min_msg_interval_ms = 7;
  if (this->_internal_min_msg_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_msg_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += DeviceInfo_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 min_msg_interval_ms = 7;
  if (this->_internal_min_msg_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_msg_interval_ms());
  }

  switch (device_type_case()) {
    // .DeviceType standard_type = 3;
    case kStandardType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_standard_type());
      break;
    }
    // string custom_type = 4;
    case kCustomType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_type());
      break;
    }
    case DEVICE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (device_units_case()) {
    // .DeviceUnits standard_unit = 5;
    case kStandardUnit: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_standard_unit());
      break;
    }
    // string custom_unit = 6;
    case kCustomUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_unit());
      break;
    }
    case DEVICE_UNITS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_min_msg_interval_ms() != 0) {
    _this->_internal_set_min_msg_interval_ms(from._internal_min_msg_interval_ms());
  }
  switch (from.device_type_case()) {
    case kStandardType: {
      _this->_internal_set_standard_type(from._internal_standard_type());
      break;
    }
    case kCustomType: {
      _this->_internal_set_custom_type(from._internal_custom_type());
      break;
    }
    case DEVICE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.device_units_case()) {
    case kStandardUnit: {
      _this->_internal_set_standard_unit(from._internal_standard_unit());
      break;
    }
    case kCustomUnit: {
      _this->_internal_set_custom_unit(from._internal_custom_unit());
      break;
    }
    case DEVICE_UNITS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.min_msg_interval_ms_, other->_impl_.min_msg_interval_ms_);
  swap(_impl_.device_type_, other->_impl_.device_type_);
  swap(_impl_.device_units_, other->_impl_.device_units_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[1]);
}

// ===================================================================

class DeviceConfig::_Internal {
 public:
};

DeviceConfig::DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceConfig)
}
DeviceConfig::DeviceConfig(const DeviceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_mode_){}
    , decltype(_impl_.msg_interval_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.device_mode_, &from._impl_.device_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_interval_ms_) -
    reinterpret_cast<char*>(&_impl_.device_mode_)) + sizeof(_impl_.msg_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:DeviceConfig)
}

inline void DeviceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_mode_){0}
    , decltype(_impl_.msg_interval_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceConfig::~DeviceConfig() {
  // @@protoc_insertion_point(destructor:DeviceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.device_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msg_interval_ms_) -
      reinterpret_cast<char*>(&_impl_.device_mode_)) + sizeof(_impl_.msg_interval_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DeviceMode device_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_mode(static_cast<::DeviceMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.msg_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DeviceMode device_mode = 1;
  if (this->_internal_device_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_mode(), target);
  }

  // uint32 msg_interval_ms = 2;
  if (this->_internal_msg_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceConfig)
  return target;
}

size_t DeviceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DeviceMode device_mode = 1;
  if (this->_internal_device_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_device_mode());
  }

  // uint32 msg_interval_ms = 2;
  if (this->_internal_msg_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_interval_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceConfig::GetClassData() const { return &_class_data_; }


void DeviceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceConfig*>(&to_msg);
  auto& from = static_cast<const DeviceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_mode() != 0) {
    _this->_internal_set_device_mode(from._internal_device_mode());
  }
  if (from._internal_msg_interval_ms() != 0) {
    _this->_internal_set_msg_interval_ms(from._internal_msg_interval_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConfig::CopyFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfig::IsInitialized() const {
  return true;
}

void DeviceConfig::InternalSwap(DeviceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.msg_interval_ms_)
      + sizeof(DeviceConfig::_impl_.msg_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(DeviceConfig, _impl_.device_mode_)>(
          reinterpret_cast<char*>(&_impl_.device_mode_),
          reinterpret_cast<char*>(&other->_impl_.device_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[2]);
}

// ===================================================================

class DeviceState::_Internal {
 public:
};

DeviceState::DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DeviceState)
}

inline void DeviceState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:DeviceState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void DeviceState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceState.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceState.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceState)
  return target;
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceState::GetClassData() const { return &_class_data_; }


void DeviceState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceState*>(&to_msg);
  auto& from = static_cast<const DeviceState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::InternalSwap(DeviceState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[3]);
}

// ===================================================================

ControllerInfo_PropertiesEntry_DoNotUse::ControllerInfo_PropertiesEntry_DoNotUse() {}
ControllerInfo_PropertiesEntry_DoNotUse::ControllerInfo_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerInfo_PropertiesEntry_DoNotUse::MergeFrom(const ControllerInfo_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerInfo_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[4]);
}

// ===================================================================

class ControllerInfo::_Internal {
 public:
};

ControllerInfo::ControllerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ControllerInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ControllerInfo)
}
ControllerInfo::ControllerInfo(const ControllerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.devices_){from._impl_.devices_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ControllerInfo)
}

inline void ControllerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.devices_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControllerInfo::~ControllerInfo() {
  // @@protoc_insertion_point(destructor:ControllerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ControllerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.devices_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ControllerInfo::ArenaDtor(void* object) {
  ControllerInfo* _this = reinterpret_cast< ControllerInfo* >(object);
  _this->_impl_.properties_.Destruct();
}
void ControllerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.devices_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ControllerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string devices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_devices();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ControllerInfo.devices"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControllerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> properties = 2;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ControllerInfo_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ControllerInfo.PropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ControllerInfo.PropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string devices = 3;
  for (int i = 0, n = this->_internal_devices_size(); i < n; i++) {
    const auto& s = this->_internal_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControllerInfo.devices");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerInfo)
  return target;
}

size_t ControllerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += ControllerInfo_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string devices = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.devices_.size());
  for (int i = 0, n = _impl_.devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.devices_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerInfo::GetClassData() const { return &_class_data_; }


void ControllerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerInfo*>(&to_msg);
  auto& from = static_cast<const ControllerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ControllerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerInfo::CopyFrom(const ControllerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerInfo::IsInitialized() const {
  return true;
}

void ControllerInfo::InternalSwap(ControllerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[5]);
}

// ===================================================================

class ControllerConfig::_Internal {
 public:
};

ControllerConfig::ControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ControllerConfig)
}
ControllerConfig::ControllerConfig(const ControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ControllerConfig* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ControllerConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ControllerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[6]);
}

// ===================================================================

class ControllerState::_Internal {
 public:
};

ControllerState::ControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ControllerState)
}
ControllerState::ControllerState(const ControllerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uptime_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.uptime_s_ = from._impl_.uptime_s_;
  // @@protoc_insertion_point(copy_constructor:ControllerState)
}

inline void ControllerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uptime_s_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:ControllerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControllerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uptime_s_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uptime_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uptime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uptime_s = 1;
  if (this->_internal_uptime_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uptime_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerState)
  return target;
}

size_t ControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uptime_s = 1;
  if (this->_internal_uptime_s() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uptime_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerState::GetClassData() const { return &_class_data_; }


void ControllerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerState*>(&to_msg);
  auto& from = static_cast<const ControllerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ControllerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uptime_s() != 0) {
    _this->_internal_set_uptime_s(from._internal_uptime_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerState::CopyFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerState::IsInitialized() const {
  return true;
}

void ControllerState::InternalSwap(ControllerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.uptime_s_, other->_impl_.uptime_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[7]);
}

// ===================================================================

AgentInfo_PropertiesEntry_DoNotUse::AgentInfo_PropertiesEntry_DoNotUse() {}
AgentInfo_PropertiesEntry_DoNotUse::AgentInfo_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgentInfo_PropertiesEntry_DoNotUse::MergeFrom(const AgentInfo_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgentInfo_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[8]);
}

// ===================================================================

class AgentInfo::_Internal {
 public:
};

AgentInfo::AgentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AgentInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AgentInfo)
}
AgentInfo::AgentInfo(const AgentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.controllers_){from._impl_.controllers_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AgentInfo)
}

inline void AgentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.controllers_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentInfo::~AgentInfo() {
  // @@protoc_insertion_point(destructor:AgentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AgentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.controllers_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void AgentInfo::ArenaDtor(void* object) {
  AgentInfo* _this = reinterpret_cast< AgentInfo* >(object);
  _this->_impl_.properties_.Destruct();
}
void AgentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AgentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.controllers_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AgentInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string controllers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_controllers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AgentInfo.controllers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AgentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AgentInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> properties = 2;
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AgentInfo_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AgentInfo.PropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AgentInfo.PropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string controllers = 3;
  for (int i = 0, n = this->_internal_controllers_size(); i < n; i++) {
    const auto& s = this->_internal_controllers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AgentInfo.controllers");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AgentInfo)
  return target;
}

size_t AgentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AgentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += AgentInfo_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string controllers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.controllers_.size());
  for (int i = 0, n = _impl_.controllers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.controllers_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInfo::GetClassData() const { return &_class_data_; }


void AgentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentInfo*>(&to_msg);
  auto& from = static_cast<const AgentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AgentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.controllers_.MergeFrom(from._impl_.controllers_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AgentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  return true;
}

void AgentInfo::InternalSwap(AgentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.controllers_.InternalSwap(&other->_impl_.controllers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[9]);
}

// ===================================================================

class AgentConfig::_Internal {
 public:
};

AgentConfig::AgentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:AgentConfig)
}
AgentConfig::AgentConfig(const AgentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AgentConfig* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AgentConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AgentConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[10]);
}

// ===================================================================

class AgentState::_Internal {
 public:
};

AgentState::AgentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AgentState)
}
AgentState::AgentState(const AgentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uptime_s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.uptime_s_ = from._impl_.uptime_s_;
  // @@protoc_insertion_point(copy_constructor:AgentState)
}

inline void AgentState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uptime_s_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AgentState::~AgentState() {
  // @@protoc_insertion_point(destructor:AgentState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AgentState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentState::Clear() {
// @@protoc_insertion_point(message_clear_start:AgentState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uptime_s_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uptime_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uptime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AgentState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uptime_s = 1;
  if (this->_internal_uptime_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uptime_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AgentState)
  return target;
}

size_t AgentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AgentState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uptime_s = 1;
  if (this->_internal_uptime_s() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uptime_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentState::GetClassData() const { return &_class_data_; }


void AgentState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentState*>(&to_msg);
  auto& from = static_cast<const AgentState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AgentState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uptime_s() != 0) {
    _this->_internal_set_uptime_s(from._internal_uptime_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentState::CopyFrom(const AgentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AgentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentState::IsInitialized() const {
  return true;
}

void AgentState::InternalSwap(AgentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.uptime_s_, other->_impl_.uptime_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopendrip_2dmsg_2eproto_getter, &descriptor_table_proto_2fopendrip_2dmsg_2eproto_once,
      file_level_metadata_proto_2fopendrip_2dmsg_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceInfo_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DeviceInfo_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceInfo_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceInfo*
Arena::CreateMaybeMessage< ::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceConfig*
Arena::CreateMaybeMessage< ::DeviceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceState*
Arena::CreateMaybeMessage< ::DeviceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceState >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerInfo_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ControllerInfo_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerInfo_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerInfo*
Arena::CreateMaybeMessage< ::ControllerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerConfig*
Arena::CreateMaybeMessage< ::ControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerState*
Arena::CreateMaybeMessage< ::ControllerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerState >(arena);
}
template<> PROTOBUF_NOINLINE ::AgentInfo_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AgentInfo_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AgentInfo_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AgentInfo*
Arena::CreateMaybeMessage< ::AgentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AgentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AgentConfig*
Arena::CreateMaybeMessage< ::AgentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AgentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::AgentState*
Arena::CreateMaybeMessage< ::AgentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AgentState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
